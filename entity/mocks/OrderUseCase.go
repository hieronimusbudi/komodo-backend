// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/hieronimusbudi/komodo-backend/entity"
	helpers "github.com/hieronimusbudi/komodo-backend/framework/helpers"

	mock "github.com/stretchr/testify/mock"

	resterrors "github.com/hieronimusbudi/komodo-backend/framework/helpers/rest_errors"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: order
func (_m *OrderUseCase) AcceptOrder(order *entity.Order) (entity.Order, resterrors.RestErr) {
	ret := _m.Called(order)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(*entity.Order) entity.Order); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 resterrors.RestErr
	if rf, ok := ret.Get(1).(func(*entity.Order) resterrors.RestErr); ok {
		r1 = rf(order)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(resterrors.RestErr)
		}
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID, userType
func (_m *OrderUseCase) GetByUserID(userID int64, userType helpers.UserTypeEnum) ([]entity.Order, resterrors.RestErr) {
	ret := _m.Called(userID, userType)

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func(int64, helpers.UserTypeEnum) []entity.Order); ok {
		r0 = rf(userID, userType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	var r1 resterrors.RestErr
	if rf, ok := ret.Get(1).(func(int64, helpers.UserTypeEnum) resterrors.RestErr); ok {
		r1 = rf(userID, userType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(resterrors.RestErr)
		}
	}

	return r0, r1
}

// Store provides a mock function with given fields: order
func (_m *OrderUseCase) Store(order *entity.Order) resterrors.RestErr {
	ret := _m.Called(order)

	var r0 resterrors.RestErr
	if rf, ok := ret.Get(0).(func(*entity.Order) resterrors.RestErr); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resterrors.RestErr)
		}
	}

	return r0
}
