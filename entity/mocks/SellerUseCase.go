// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/hieronimusbudi/komodo-backend/entity"
	mock "github.com/stretchr/testify/mock"

	resterrors "github.com/hieronimusbudi/komodo-backend/framework/helpers/rest_errors"
)

// SellerUseCase is an autogenerated mock type for the SellerUseCase type
type SellerUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: seller
func (_m *SellerUseCase) Login(seller *entity.Seller) (entity.Seller, resterrors.RestErr) {
	ret := _m.Called(seller)

	var r0 entity.Seller
	if rf, ok := ret.Get(0).(func(*entity.Seller) entity.Seller); ok {
		r0 = rf(seller)
	} else {
		r0 = ret.Get(0).(entity.Seller)
	}

	var r1 resterrors.RestErr
	if rf, ok := ret.Get(1).(func(*entity.Seller) resterrors.RestErr); ok {
		r1 = rf(seller)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(resterrors.RestErr)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: seller
func (_m *SellerUseCase) Register(seller *entity.Seller) resterrors.RestErr {
	ret := _m.Called(seller)

	var r0 resterrors.RestErr
	if rf, ok := ret.Get(0).(func(*entity.Seller) resterrors.RestErr); ok {
		r0 = rf(seller)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resterrors.RestErr)
		}
	}

	return r0
}
