// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/hieronimusbudi/komodo-backend/entity"
	mock "github.com/stretchr/testify/mock"

	resterrors "github.com/hieronimusbudi/komodo-backend/framework/helpers/rest_errors"
)

// ProductUseCase is an autogenerated mock type for the ProductUseCase type
type ProductUseCase struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *ProductUseCase) GetAll() ([]entity.Product, resterrors.RestErr) {
	ret := _m.Called()

	var r0 []entity.Product
	if rf, ok := ret.Get(0).(func() []entity.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	var r1 resterrors.RestErr
	if rf, ok := ret.Get(1).(func() resterrors.RestErr); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(resterrors.RestErr)
		}
	}

	return r0, r1
}

// Store provides a mock function with given fields: product
func (_m *ProductUseCase) Store(product *entity.Product) resterrors.RestErr {
	ret := _m.Called(product)

	var r0 resterrors.RestErr
	if rf, ok := ret.Get(0).(func(*entity.Product) resterrors.RestErr); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resterrors.RestErr)
		}
	}

	return r0
}
